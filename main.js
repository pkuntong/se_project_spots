!function(){"use strict";const e={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__submit-btn",inactiveButtonClass:"modal__submit-btn_inactive",inputErrorClass:"modal__input_type_error",errorClass:"modal__error"},t=(e,t,r)=>{e.querySelector(`#${t.id}-error`).textContent="",t.classList.remove(r.inputErrorClass)},r=(e,t)=>{e.disabled=!0,e.classList.add(t.inactiveButtonClass)},n=(e,t,n)=>{(e=>e.some((e=>!e.validity.valid)))(e)?r(t,n):(t.disabled=!1,t.classList.remove(n.inactiveButtonClass))};function o(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"Save",n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"Saving...";t.textContent=e?n:r}function a(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"Saving...";t.preventDefault();const n=t.submitter,a=n.textContent;o(!0,n,a,r),e().then((()=>{t.target.reset()})).catch(console.error).finally((()=>{o(!1,n,a)}))}const s=new class{constructor(e){let{baseUrl:t,headers:r}=e;this._baseUrl=t,this._headers=r}getAppInfo(){return Promise.all([this.getInitialCards(),this.getUserInfo()])}checkResponse(e){return e.ok?e.json():Promise.reject(`Error ${e.status}`)}request(e,t){return fetch(e,t).then(this.checkResponse)}getInitialCards(){return this.request(`${this._baseUrl}/cards`,{headers:this._headers})}getUserInfo(){return this.request(`${this._baseUrl}/users/me`,{headers:this._headers})}editUserInfo(e){let{name:t,about:r}=e;return this.request(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:r})})}editAvatarInfo(e){return this.request(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})})}addCard(e){let{name:t,link:r}=e;return this.request(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:r})})}deleteCard(e){return this.request(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers})}changeLikeStatus(e,t){return this.request(`${this._baseUrl}/cards/${e}/likes`,{method:t?"DELETE":"PUT",headers:this._headers})}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"8821c207-7c9b-4450-ae25-85456081faad","Content-Type":"application/json"}});function i(e){e.target===e.currentTarget&&c(e.currentTarget)}function d(e){"Escape"===e.key&&c(document.querySelector(".modal_opened"))}function l(e){e.classList.add("modal_opened"),document.addEventListener("keydown",d),e.addEventListener("mousedown",i)}function c(e){e&&(e.classList.remove("modal_opened"),document.removeEventListener("keydown",d),e.removeEventListener("mousedown",i))}function u(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"prepend";const r=function(e){if(!cardTemplate)return console.error("Error: cardTemplate is not defined or not found."),null;const t=cardTemplate.querySelector(".card").cloneNode(!0),r=t.querySelector(".card__title"),n=t.querySelector(".card__image"),o=t.querySelector(".card__like-btn"),a=t.querySelector(".card__delete-btn");return r.textContent=e.name,n.src=e.link,n.alt=e.name,e.isLiked&&o.classList.add("card__like-btn_liked"),o.addEventListener("click",(t=>handleLike(t,e._id))),a.addEventListener("click",(()=>handleDeleteCard(t,e._id))),n.addEventListener("click",(()=>handleImageClick(e))),t}(e);r&&cardsList[t](r)}function m(t){t.preventDefault(),a((function(){return s.editAvatarInfo(avatarInput.value).then((t=>{profileImage.src=t.avatar,r(avatarSubmitButton,e),c(avatarModal)}))}),t)}function h(e){e.preventDefault(),a((function(){return s.editUserInfo({name:nameInput.value,about:descriptionInput.value}).then((e=>{profileName.textContent=e.name,profileDescription.textContent=e.about,c(editProfileModal)}))}),e)}function v(t){t.preventDefault(),a((function(){return s.addCard({name:titleInput.value,link:imageInput.value}).then((t=>{u(t),r(cardSubmitButton,e),c(cardModal)}))}),t)}function _(e){e.preventDefault(),a((function(){return s.deleteCard(void 0).then((()=>{(void 0).remove(),c(deleteModal)}))}),e,"Deleting...")}document.addEventListener("DOMContentLoaded",(()=>{const r=document.querySelectorAll(".modal__close-btn"),o=document.querySelector("#card-template")?.content,a=document.querySelector(".cards__list");if(console.log("Card template:",o),!o)return void console.error("Error: Card template not found.");const i=document.querySelector(".profile__avatar"),d=document.querySelector(".profile__name"),f=document.querySelector(".profile__description");s.getAppInfo().then((e=>{let[t,r]=e;console.log("Fetched cards:",t),0===t.length?(console.log("No cards available"),a.innerHTML="<p>No cards to display.</p>"):(t.reverse(),t.forEach((e=>{u(e)}))),i.src=r.avatar,d.textContent=r.name,f.textContent=r.about})).catch(console.error),r.forEach((e=>{const t=e.closest(".modal");e.addEventListener("click",(()=>c(t)))}));const p=document.querySelector(".profile__avatar-btn"),y=document.querySelector("#avatar-modal"),S=y.querySelector("#edit-avatar-form");p.addEventListener("click",(()=>l(y))),S.addEventListener("submit",m);const b=document.querySelector(".profile__edit-btn"),q=document.querySelector("#edit-modal"),E=q.querySelector("#edit-profile-form"),L=q.querySelector("#profile-name-input"),g=q.querySelector("#profile-description-input");b.addEventListener("click",(()=>{var r,n;L.value=d.textContent,g.value=f.textContent,r=E,n=e,[L,g].forEach((e=>{t(r,e,n)})),l(q)})),E.addEventListener("submit",h);const C=document.querySelector(".profile__add-btn"),k=document.querySelector("#card-modal"),I=k.querySelector("#card-form");C.addEventListener("click",(()=>l(k))),I.addEventListener("submit",v);const U=document.querySelector("#delete-modal"),T=U.querySelector(".modal__form"),$=U.querySelector(".modal__submit-btn_type_cancel");var x;T.addEventListener("submit",_),$.addEventListener("click",(()=>c(U))),x=e,document.querySelectorAll(x.formSelector).forEach((e=>{((e,r)=>{const o=Array.from(e.querySelectorAll(r.inputSelector)),a=e.querySelector(r.submitButtonSelector);console.log(o),console.log(a),n(o,a,r),o.forEach((s=>{s.addEventListener("input",(function(){((e,r,n)=>{r.validity.valid?t(e,r,n):((e,t,r,n)=>{const o=e.querySelector(`#${t.id}-error`);t.classList.add(n.inputErrorClass),o.textContent=r})(e,r,r.validationMessage,n)})(e,s,r),n(o,a,r)}))}))})(e,x)}))}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,