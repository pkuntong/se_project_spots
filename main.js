!function(){"use strict";const e={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__submit-btn",inactiveButtonClass:"modal__submit-btn_inactive",inputErrorClass:"modal__input_type_error",errorClass:"modal__error"},t=(e,t,r)=>{e.querySelector(`#${t.id}-error`).textContent="",t.classList.remove(r.inputErrorClass)},r=(e,t)=>{e.disabled=!0,e.classList.add(t.inactiveButtonClass)},n=(e,t,n)=>{(e=>e.some((e=>!e.validity.valid)))(e)?r(t,n):(t.disabled=!1,t.classList.remove(n.inactiveButtonClass))};function o(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"Save",n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"Saving...";t.textContent=e?n:r}function a(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"Saving...";t.preventDefault();const n=t.submitter,a=n.textContent;o(!0,n,a,r),e().then((()=>{t.target.reset()})).catch(console.error).finally((()=>{o(!1,n,a)}))}let s,i;const c=new class{constructor(e){let{baseUrl:t,headers:r}=e;this._baseUrl=t,this._headers=r}getAppInfo(){return Promise.all([this.getInitialCards(),this.getUserInfo()])}checkResponse(e){return e.ok?e.json():Promise.reject(`Error ${e.status}`)}request(e,t){return fetch(e,t).then(this.checkResponse)}getInitialCards(){return this.request(`${this._baseUrl}/cards`,{headers:this._headers})}getUserInfo(){return this.request(`${this._baseUrl}/users/me`,{headers:this._headers})}editUserInfo(e){let{name:t,about:r}=e;return this.request(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:r})})}editAvatarInfo(e){return this.request(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})})}addCard(e){let{name:t,link:r}=e;return this.request(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:r})})}deleteCard(e){return this.request(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers})}changeLikeStatus(e,t){return this.request(`${this._baseUrl}/cards/${e}/likes`,{method:t?"DELETE":"PUT",headers:this._headers})}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"3f12c5b5-3e74-48ea-937f-23ac37f0f2e1","Content-Type":"application/json"}});document.addEventListener("DOMContentLoaded",(()=>{const o=document.querySelector("#card-template")?.content,l=document.querySelector(".cards__list"),d=document.querySelectorAll(".modal__close-btn"),u=document.querySelector(".profile__edit-btn"),m=document.querySelector(".profile__avatar"),_=document.querySelector(".profile__name"),h=document.querySelector(".profile__description"),v=document.querySelector(".profile__add-btn"),f=document.querySelector(".profile__avatar-btn"),y=document.querySelector("#edit-modal"),p=y?.querySelector("#edit-profile-form"),S=y?.querySelector("#profile-name-input"),b=y?.querySelector("#profile-description-input"),q=document.querySelector("#card-modal"),E=q?.querySelector("#card-form"),L=q?.querySelector(".modal__submit-btn"),k=q?.querySelector("#card-link-input"),g=q?.querySelector("#card-caption-input"),C=document.querySelector("#avatar-modal"),U=C?.querySelector("#edit-avatar-form"),x=C?.querySelector("#profile-avatar-input"),$=C?.querySelector(".modal__submit-btn"),A=document.querySelector("#delete-modal"),I=A?.querySelector(".modal__form"),D=A?.querySelector(".modal__submit-btn_type_cancel"),T=document.querySelector("#preview-modal"),w=T?.querySelector(".modal__image"),P=T?.querySelector(".modal__caption");var B;function O(e){e&&(e.classList.add("modal_opened"),document.addEventListener("keydown",J),e.addEventListener("mousedown",j))}function N(e){e&&(e.classList.remove("modal_opened"),document.removeEventListener("keydown",J),e.removeEventListener("mousedown",j))}function j(e){e.target===e.currentTarget&&N(e.currentTarget)}function J(e){"Escape"===e.key&&N(document.querySelector(".modal_opened"))}function H(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"prepend";const r=function(e){const t=o.querySelector(".card").cloneNode(!0),r=t.querySelector(".card__title"),n=t.querySelector(".card__image"),a=t.querySelector(".card__like-btn"),l=t.querySelector(".card__bin-btn");return e.isLiked&&a.classList.add("card__like-btn_liked"),n.src=e.link,n.alt=e.alt||e.name,r.textContent=e.name,a.addEventListener("click",(t=>function(e,t){const r=e.target,n=r.classList.contains("card__like-btn_liked");c.changeLikeStatus(t,n).then((e=>{r.classList.toggle("card__like-btn_liked",!e)})).catch(console.error)}(t,e._id))),l.addEventListener("click",(()=>function(e,t){s=e,i=t,O(A)}(t,e._id))),n.addEventListener("click",(()=>function(e){w.src=e.link,w.alt=e.name,P.textContent=e.name,O(T)}(e))),t}(e);l[t](r)}c.getAppInfo().then((e=>{let[t,r]=e;t.reverse(),t.forEach((e=>{H(e)})),m.src=r.avatar,_.textContent=r.name,h.textContent=r.about})).catch(console.error),d.forEach((e=>{const t=e.closest(".modal");e.addEventListener("click",(()=>N(t)))})),f?.addEventListener("click",(()=>{O(C)})),U?.addEventListener("submit",(function(t){t.preventDefault(),a((function(){return c.editAvatarInfo(x.value).then((t=>{m.src=t.avatar,r($,e),N(C)}))}),t)})),u?.addEventListener("click",(()=>{var r,n;S&&_&&b&&h&&(S.value=_.textContent,b.value=h.textContent,r=p,n=e,[S,b].forEach((e=>{t(r,e,n)})),O(y))})),p?.addEventListener("submit",(function(e){e.preventDefault(),a((function(){return c.editUserInfo({name:S.value,about:b.value}).then((e=>{_.textContent=e.name,h.textContent=e.about,N(y)}))}),e)})),v?.addEventListener("click",(()=>{O(q)})),E?.addEventListener("submit",(function(t){t.preventDefault(),a((function(){return c.addCard({name:g.value,link:k.value}).then((t=>{H(t),r(L,e),N(q)}))}),t)})),I?.addEventListener("submit",(function(e){e.preventDefault(),a((function(){return c.deleteCard(i).then((()=>{s.remove(),N(A)}))}),e,"Deleting...")})),D?.addEventListener("click",(()=>{N(A)})),B=e,document.querySelectorAll(B.formSelector).forEach((e=>{((e,r)=>{const o=Array.from(e.querySelectorAll(r.inputSelector)),a=e.querySelector(r.submitButtonSelector);console.log(o),console.log(a),n(o,a,r),o.forEach((s=>{s.addEventListener("input",(function(){((e,r,n)=>{r.validity.valid?t(e,r,n):((e,t,r,n)=>{const o=e.querySelector(`#${t.id}-error`);t.classList.add(n.inputErrorClass),o.textContent=r})(e,r,r.validationMessage,n)})(e,s,r),n(o,a,r)}))}))})(e,B)}))}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,